/* A */

essa classe simplesmente cria o Timetable, aparentemente importa e renova, gerando um ciclo

/*util*/

na classe Timetable, ele importa várias outras classes para dentro dela 
	dentro da classe, criam arraylist para classes datacontrol, timecontrol, weekdaycontrol, classroomcontrol e metodos especificos de cada um. é criado um array timetable, que enviará esses 4 arrays para o metodo generator, na classe timetable generator   
		no metodo que tem o mesmo nome, gera o valor data, que nem o outro, portanto, não sendo arraylist, tambem gera a classe showtimetable que receberá esse data e o array timetable gerado na classe.

na classe showTimetable, ela importa 7 classes
	dentro da classe, ela simplesmente mostrará tudo o que foi feito 
	cria 3 arraylist, o times, o days e o classrooms
		no metodo showtimeable, ele recebe o array timetable(da classe timetable) e o arraylist datamodel data
			possui um for que o limite é o tamanho do timeable e o i soma de 5 em 5
				possui um outro for que (DataModel d : data)
					possui um if cujo parâmetro é  (d.getIndex() == timetable[i])
						e aqui roda somente os printf
				
				possui um outro for que (TimeModel t : times)
					possui um if cujo parâmetro é  (t.getIndex() == timetable[i+1])
						e aqui roda somente os printf
				

				possui um outro for que (WeekDayModel d : days)
					possui um if cujo parâmetro é  (d.getIndex() == timetable[i+2])
						e aqui roda somente os printf

				possui um outro for que (ClassroomModel c : classrooms)
					possui um if cujo parâmetro é  (c.getIndex() == timetable[i+2])
						e aqui roda somente os printf
				
				tudo isso é atrelado ao System.out.println();
		
		tem o outro metodo chamado show chromossome onde recebe tambem o array timetable
			tem o for cujo tamanho é comprimento do array timetable
				e aqui roda somente os printf
				
				tudo isso é atrelado ao System.out.println();

/*population*/

 
na unica classe, chamada Timetable generator, ela importa 7 classes

	no metodo generator, na qual estão dentro do parâmetro as 4 arraylist da classe timetable, 

	cria ints "event_id = 0, hour_id = 0, day_id = 0, duration = 0, classroom_id = 0, tmp"

	cria um vetor de arraylist: List<Integer> gene = new ArrayList<Integer>();
		criará um while extenso, onde terá outros while e if dentro, onde o datasize terá de ser maior que zero.

			cria um int random parrudo de sempre

			bota "data.get(r).getIndex();" dentro do int event_id
				gera outro while, que tem como parâmetros (times.get(tmp).getShift() != data.get(r).getShift())
				insere "new Random().nextInt(times.size());" no tmp
				insere "times.get(tmp).getIndex();" no hour_id
				
			bota "days.get(new Random().nextInt(days.size())).getIndex();" dentro do int day_id
				possui um if que se (data.get(r).getSemanalLessons() >= data.get(r).getMaxDailylLessons()), enfia no duration o Random().nextInt(1 + data.get(r).getMaxDailylLessons() - data.get(r).getMinDailylLessons());
				no else if (data.get(r).getSemanalLessons() >= data.get(r).getMinDailylLessons()), enfia no duration o Random().nextInt(1 + data.get(r).getSemanalLessons() - data.get(r).getMinDailylLessons());
				e fora dos if, o duration recebe data.get(r).getMinDailylLessons();

				aparece um outro while, cujo parametros é (classrooms.get(classroom_id).getCod_type() != data.get(r).getClassRoomType())
				ela manda no classrom_id o new Random().nextInt(classrooms.size());

				aparece um outro if, onde se algum numero aleatorio do SemanalLesson() dentro de data for menor ou igual a 0, removerá os antigos e adicionará os novos

			cria o array cromossomo, onde tem o mesmo tamanho do comprimento do gene
				tem o for que inserirá valores no cromossomo
			depois do for, os cromossomos serão retornados
				
/*dataLoader*/

na classe clasroomcontrol, basicamente cria o o arraylist clasroomModel, e dentro dela o clasroom, onde serão adicionados as salas do if

na classe classroomModel, cria três ints e duas strings
	no metodo classroomModel, regata os valores criados e firma que são eles mesmo
	e outros metodos são para retornar os valores criados que estarão sendo usado em outros locais

na classe dataloader inseriá bibliotecas do java que permitirá a identificação, letura e alertas de outros tipos de arquivos 
	dentro da classe cria um input chamado Scanner, cria o array data no arraylist dataModel e o inteiro i que possui zero, todos são privados
		tem um metodo chamado Loader, que parece estar atrelado arraylist dataModel
			começa com o scanneamento do documento linha por linha 
				tem o while que basicamente irá transcrever o scanneio e passar para o array data
		o data será retornado

na classe Datamodel, ela faz a mesma coisa que o classroomModel, porém com muito mais variáveis

a classe dataview tem nada

o romms faz a mesma coisa que o datamodel e o classroommodel, porém não tem um metodo que resgata e firma

a classe timecontrols faz a mesma coisa que o classroomcontrol porém é com horários dessas vez

a classe timemodel faz a mesma coisa que o datamModel e o classroomModel
					
a classe weekdaycontrol faz a mesma coisa que o clasroom control portem com dias da semana

a classe weekdaymodel faz a mesma coisa que o datamModel e o classroomModel e o timemoodel

/*hardConstraints*/

tem nada ainda